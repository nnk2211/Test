import { describe, expect, test, vi } from 'vitest';
import { performLogout } from './logout';
import { XiorInstance, XiorResponse, XiorError } from 'xior';
import { mockApiAppConfig } from '../../../testUtils/mocks';

const logoutApiEndpoint = '/secure/customer-platform/rest/api/logout';

describe('performLogout should function properly', () => {
  const mockAuthCookie = 'RHVtbXkgQXV0aGVudGljYXRpc24gQ29va2ll';
  const mockCsrfCookie = 'mockCsrfCookie';
  const mockCsrfToken = 'mockCsrfToken';
  const mockCookieString = `${mockApiAppConfig.slalApiAuthCookies[0]}=${mockAuthCookie}`;

  const slalXior = {
    post: vi.fn(),
    config: {
      headers: {
        Cookie: mockCookieString,
      },
    },
  } as unknown as XiorInstance;

  test('should call the SLAL logout API with CSRF token and cookies', async () => {
    const mockResponse = {
      status: 200,
      data: { message: 'Session terminated' },
    } as XiorResponse;

    const xiorSpy = vi.spyOn(slalXior, 'post');
    xiorSpy.mockResolvedValueOnce(mockResponse);

    const result = await performLogout(slalXior, mockCsrfCookie, mockCsrfToken);

    expect(xiorSpy).toHaveBeenCalledTimes(1);
    expect(xiorSpy).toHaveBeenCalledWith(
      logoutApiEndpoint,
      { csrfToken: mockCsrfToken },
      {
        headers: {
          Cookie: `${mockCookieString}; CSRF=${mockCsrfCookie}`,
          'Content-Type': 'application/json',
        },
      }
    );

    expect(result).toEqual(mockResponse);
  });

  test('should throw XiorError when SLAL logout API call fails', async () => {
    const error = new XiorError('Logout failed');
    const xiorSpy = vi.spyOn(slalXior, 'post');
    xiorSpy.mockRejectedValueOnce(error);

    await expect(performLogout(slalXior, mockCsrfCookie, mockCsrfToken)).rejects.toThrowError('Logout failed');
  });
});

expect(xiorSpy).toHaveBeenCalledWith(
  '/secure/customer-platform/rest/api/logout',
  { csrfToken: mockCsrfToken },
  {
    headers: {
      Cookie: `${mockCookieString}; CSRF=${mockCsrfCookie}`,
      'Content-Type': 'application/json',
    },
  }
);


describe('POST /secure/api/logout works as expected', () => {
  const logoutTestPack: TestPack<{ message: string }> = [
    {
      ck: 'validAuthCookie=xyz; CSRF=mockCsrfCookie',
      description: 'should return 202 when valid CSRF token and cookie are provided',
      response: {
        status: 202,
        body: { message: 'Session terminated' },
      },
    },
    {
      ck: 'invalidAuth=none',
      description: 'should return 401 when missing/invalid cookies or token',
      response: {
        status: 401,
        body: 'Unauthenticated',
      },
    },
  ];

  logoutTestPack.forEach(({ ck, description, response: { status, body } }) => {
    test(description, async ({ baseUrl }) => {
      await spec()
        .post(`${baseUrl}/secure/api/logout`)
        .withHeaders({ 'Content-Type': 'application/json' })
        .withCookies({ ck })
        .withJson({ csrfToken: 'mockCsrfToken' })
        .expectStatus(status)
        .expectBody(body);
    });
  });
});

mockApp.use('*', async (c, next) => {
  if (typeof c.req.body === 'string') {
    // Manually parse and attach body for OpenAPI validation
    const parsed = JSON.parse(c.req.body);
    c.req.json = async () => parsed;
  }
  await next();
});