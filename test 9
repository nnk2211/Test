Yes, great observation!

In your POST /logout handler, you’re already doing:

const logoutData = c.req.valid('json'); // validates body against zod schema via openapi spec

So for consistency and stronger validation, you can absolutely apply the same .valid('cookie') approach to extract the CSRF token like this:

const csrfCookieFromBrowser = c.req.valid('cookie').CSRF;

But to make that work safely, you should also define a cookieSchema in your createRoute() block like you did for query in GET /complete-connection:

const cookieSchema = z.object({
  CSRF: z.string().describe('CSRF cookie used for validating logout request'),
});

And then attach it:

const routeSpec = createRoute({
  method: 'post',
  path,
  request: {
    body: {
      description: 'Logout details',
      required: true,
      content: {
        'application/json': {
          schema: logoutApiSchema,
        },
      },
    },
    cookies: cookieSchema, // <--- Add this
  },
  ...
});

That way:

c.req.valid('cookie') validates against schema.

Any missing or invalid CSRF cookie throws a Zod error early (and auto-handled by Hono’s OpenAPI validation).


Bonus: You get auto-generated OpenAPI spec with cookie documented too!

Let me know if you want me to write that snippet cleanly end-to-end. Want to add cookie schema now?


test('should return 400 when CSRF cookie is missing', async () => {
  const cookieHeader = constructCookieString({
    [mockApiAppConfig.sla1ApiAuthCookies[0]]: 'jwt...',
    // CSRF cookie intentionally omitted
  });

  const response = await handler(
    getEvent(
      '/logout',
      {
        Cookie: cookieHeader,
        'Content-Type': 'application/json',
      },
      'POST',
      { csrfToken: 'mockCsrfToken' } // body still valid
    )
  );

  expect(response.statusCode).toBe(400);
  expect(response.body).toContain('CSRF'); // optional: match message
});

test('should return 400 when csrfToken is not a string', async () => {
  const response = await handler(
    getEvent(
      '/logout',
      {
        Cookie: cookieHeader,
        'Content-Type': 'application/json',
      },
      'POST',
      { csrfToken: 12345 } // invalid type
    )
  );

  expect(response.statusCode).toBe(400);
  expect(response.body).toContain('"expected":"string"');
});

test('should return 400 when csrfToken is missing in request body', async () => {
  const response = await handler(
    getEvent(
      '/logout',
      {
        Cookie: cookieHeader,
        'Content-Type': 'application/json',
      },
      'POST',
      {} // empty body
    )
  );

  expect(response.statusCode).toBe(400);
  expect(response.body).toContain('"path":["csrfToken"]');
});


test('should return 400 when request body is missing', async () => {
  const response = await handler(
    getEvent(
      '/logout',
      {
        Cookie: cookieHeader,
        'Content-Type': 'application/json',
      },
      'POST'
    )
  );

  expect(response.statusCode).toBe(400);
  expect(response.body).toContain('"message":"Required"'); // Zod error message
});

test('should return 400 when CSRF cookie is missing', async () => {
  const cookieHeader = constructCookieString({
    [mockApiAppConfig.sla1ApiAuthCookies[0]]: 'jwt...',
    // CSRF cookie intentionally omitted
  });

  const response = await handler(
    getEvent(
      '/logout',
      {
        Cookie: cookieHeader,
        'Content-Type': 'application/json',
      },
      'POST',
      { csrfToken: 'mockCsrfToken' } // body still valid
    )
  );

  expect(response.statusCode).toBe(400);
  expect(response.body).toContain('CSRF'); // optional: match message
});


test('should return 400 when CSRF cookie is invalid type', async () => {
  const cookieHeader = constructCookieString({
    [mockApiAppConfig.sla1ApiAuthCookies[0]]: 'jwt...',
    CSRF: 12345 as unknown as string, // force invalid type
  });

  const response = await handler(
    getEvent(
      '/logout',
      {
        Cookie: cookieHeader,
        'Content-Type': 'application/json',
      },
      'POST',
      { csrfToken: 'mockCsrfToken' }
    )
  );

  expect(response.statusCode).toBe(400);
});


Your wrapper test setup looks excellent — it clearly covers:

1. Successful logout (200) with correct body and headers.


2. Failure scenario when the SLAL API call fails (XiorError).



To enhance this even more, you could add:


---

1. Edge case test: Missing csrfToken

Check what happens if csrfTokenValue is undefined or an empty string.

test('should fail if csrfTokenValue is missing', async () => {
  await expect(
    performLogout(slalXior, mockCsrfCookie, '')
  ).rejects.toThrow(); // or a specific error if you're throwing one
});


---

2. Malformed cookie

If your logic depends on specific formatting (e.g. cookie string replacement), test a malformed or unexpected cookie:

test('should handle malformed cookie', async () => {
  const malformedCookie = 'badFormat;missingEquals';
  const spy = vi.spyOn(slalXior, 'post');

  await performLogout(slalXior, malformedCookie, mockCsrfToken);
  expect(spy).toHaveBeenCalledWith(
    logoutApiEndpoint,
    { csrfToken: mockCsrfToken },
    expect.objectContaining({
      headers: expect.objectContaining({
        Cookie: expect.stringContaining('CSRF='),
      }),
    })
  );
});


---

3. Missing slalXior instance

If slalXior is ever nullable from upstream, a negative test might help:

test('should throw if slalXior is undefined', async () => {
  await expect(
    // @ts-expect-error simulating undefined instance
    performLogout(undefined, mockCsrfCookie, mockCsrfToken)
  ).rejects.toThrow();
});


---

Let me know if you want the full test case snippets dropped into your file! Want me to include any of these directly?

.withCookies(`ck=${ck}; CSRF=mockCsrfToken`)



