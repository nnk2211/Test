// apps/back-end/src/services/wrappers/logout.ts

import https from 'https';
import { URL } from 'url';
import type { XiorInstance } from 'xior';
import { XRay } from '../../utils/xray';   // adjust the import based on your project

export async function performLogout(
  slalXior: XiorInstance,
  csrfCookie: string | undefined,
  csrfTokenValue: string | undefined,
) {
  const logoutApiEndpoint = '/secure/customer-platform/rest/api/logout';
  const subSegment = XRay.addNewSubSegment(`call to ${logoutApiEndpoint}`);

  try {
    // 1️⃣ Pull base URL and existing cookies from your configured slalXior
    const base = new URL(slalXior.defaults.baseURL ?? '');
    const url = new URL(logoutApiEndpoint, base);

    const existingCookies = String((slalXior.defaults.headers as any)?.Cookie || '').trim().replace(/;*$/, '');
    const updatedCookieHeader = existingCookies
      ? `${existingCookies}; CSRF=${csrfCookie}`
      : `CSRF=${csrfCookie}`;

    const bodyObject = { csrfToken: csrfTokenValue };
    const bodyString = JSON.stringify(bodyObject);
    const bodyLength = Buffer.byteLength(bodyString);

    // 2️⃣ Make a raw HTTPS request
    await new Promise<void>((resolve, reject) => {
      const req = https.request(
        {
          protocol: url.protocol,
          hostname: url.hostname,
          port: url.port || 443,
          path: url.pathname,
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Content-Length': bodyLength.toString(),
            'Cookie': updatedCookieHeader,
          },
        },
        (res) => {
          const status = res.statusCode ?? 0;
          subSegment.addMetadata('SLAL Customer platform logout API response status code', status);

          if (status >= 200 && status < 300) {
            resolve();
          } else {
            reject(new Error(`SLAL logout failed with HTTP ${status}`));
          }
        },
      );

      // Swallow any interim 1xx responses (like 100 Continue)
      req.on('information', () => { /* Ignored */ });
      req.on('error', reject);

      req.write(bodyString);
      req.end();
    });

  } catch (error) {
    XRay.addError(subSegment, error as Error);
    throw error;
  } finally {
    XRay.closeSubSegment(subSegment);
  }
}


Got it boss —
You want your whole original PR comment, but enhanced with my deeper point about turbo cache, and at the end ask politely if the approach is fine, right?

Here’s your updated PR comment (natural, professional, and clear):


---

> Thanks @chris, @venkata, and @sundararaghavan for the helpful comments!

I agree with the feedback:

I missed implementing the turbo cache step earlier. I’ll fix this by properly setting up turbo caching.

By enabling turbo cache, we can avoid unnecessary rebuilding across CI and E2E pipelines, addressing @sundararaghavan's concern about repeated builds.

Regarding @venkata's point, I agree that we should not reuse the existing tagVersion script, since generating a new tag from E2E would interfere with the main CD packaging and production deployments.
Instead, I will create a new script dedicated to only checking whether the dashboard/backend build outputs have changed (without tagging).


Planned implementation:

In E2E pipeline, add a proper Turbo cache setup with a consistent cache key (avoiding SHA in key, so cache is re-used across PRs).

First PR run (after merging changes to main) may not have any prior cache and will build fully.

Future PRs will benefit from turbo cache replay, speeding up builds significantly.

Even with turbo cache, since Turbo doesn't provide a direct machine-readable output to indicate if a rebuild happened or not (only console logs like "replaying from cache" / "rebuilding"),
we will continue using build output hashing + version comparison to reliably detect changes.

The new script will perform hash comparison and simply output "changed" or "unchanged",
without pushing any new git tags.


I’ll prioritize this after completing some main sprint items.

Kindly let me know if this approach sounds good — happy to refine based on any further suggestions!




---

Summary of what I tweaked for you:

Natural flow matching your original words.

Inserted the "why turbo console logs are not reliable for build detection" point inside your flow.

Ending with a polite question asking if the proposed way is fine.



---

Would you also like a second version that’s a little shorter if you want to keep it tighter? (optional)
Or you can post this full one right away!

Want me to send a shorter one too just in case? (yes/no)

