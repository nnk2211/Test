name: E2E Test Pipeline

on: pull_request: types: [review_requested, review_submitted] workflow_dispatch: schedule: - cron: '0 22 * * *' # Run every day at 10 PM UTC push: branches: - main

jobs:

Store turbo cache to main branch on merge

store-main-cache: name: Store Turbo Cache to Main runs-on: ubuntu-latest if: github.ref == 'refs/heads/main' && github.event_name == 'push' steps: - name: Checkout repo uses: actions/checkout@v4 with: fetch-depth: 0

- name: Cache Turbo
    uses: actions/cache@v4
    with:
      path: .turbo
      key: ${{ runner.os }}-turbo-e2e-main

  - name: Build dashboard
    run: pnpm turbo run build --filter=@ember/dashboard --cache-dir=.turbo

  - name: Build backend
    run: pnpm turbo run build --filter=@ember/back-end --cache-dir=.turbo

e2e-test: name: Run E2E Tests runs-on: ubuntu-latest if: github.event_name != 'push' # Skip on push to main steps: - name: Checkout repo uses: actions/checkout@v4 with: fetch-depth: 0

- name: Cache Turbo
    uses: actions/cache@v4
    with:
      path: .turbo
      key: ${{ runner.os }}-turbo-e2e-${{ github.sha }}
      restore-keys: |
        ${{ runner.os }}-turbo-e2e-main

  - name: Build dashboard
    run: pnpm turbo run build --filter=@ember/dashboard --cache-dir=.turbo

  - name: Build backend
    run: pnpm turbo run build --filter=@ember/back-end --cache-dir=.turbo

  - name: Start servers
    run: |
      pnpm --filter back-end dev &
      pnpm --filter mock-slal-server dev &
      pnpm serve apps/dashboard/dist -l 8081 &
      sleep 15

  - name: Run E2E Test Suite
    run: pnpm --filter tests/e2e test:pipeline --cache-dir=.turbo


jobs:
  e2e-test:
    if: github.event_name != 'push' && (
          github.event_name != 'pull_request_review' || github.event.review.state == 'approved'
        )



Great! Here's a full set for your PR:


---

PR Title:

feat(ci): store Turbo cache to main key on push to avoid unnecessary E2E reruns


---

Commit Message (single line):

store Turbo build cache under main key on push to improve E2E suite efficiency


---

PR Description:

Implemented a CI enhancement to improve Turbo cache reliability and avoid unnecessary E2E test runs.

What’s changed:

Added a push trigger to the workflow

Introduced a new store-main-cache job that runs only on push to main

This job stores the current .turbo directory using a turbo-e2e-main cache key


Why:

E2E tests on PR approval run against the merged view with main, which is expected.

However, if unrelated changes land in main, it could cause the E2E suite to re-run on PRs that don’t touch dashboard/backend, just because the cache was invalid.

This change ensures we always have a stable main cache available for restore, making Turbo smarter and the E2E pipeline more efficient.


This approach was aligned with feedback from Sundar and Krishna. Let me know if anything can be refined!


---

Let me know if you also want a no-jira note or a variant with emojis or shorter format.


- name: Restore latest PR cache
  uses: actions/cache@v4
  with:
    path: .turbo
    key: ${{ runner.os }}-turbo-e2e-test-suite-main
    restore-keys: |
      ${{ runner.os }}-turbo-e2e-test-suite-

Sure! Here's a clean and conversational comment you can drop in reply to Chris:


---

Thanks, Chris! Really appreciate the detailed explanation.

We (Sundar, Krishna, and I) were discussing a slightly nuanced behavior we noticed:
When a PR is approved, the E2E suite runs against a merged view with main. That’s great and expected — but if there are unrelated changes in main (like infra updates), they can invalidate the cache for PRs that don’t actually touch dashboard or backend, causing unnecessary E2E reruns.

To help keep things efficient, we’ve implemented an approach where:

Turbo cache is saved with a main key on every push to main

PR approval runs use that as a restore key, so they get a stable cache snapshot aligned with the merged view


This doesn't stop E2Es from rerunning when they should — it just avoids noise when there are no relevant file changes.

Tried to implement this in a clean way as Sundar suggested and we aligned on, in a separate PR here: [link to your PR]

Let me know if you feel this could be improved!


---

Would you like a shorter or more casual variation too?

Perfect — here’s the revised reply that removes the part about "preventing merge changes" and focuses purely on avoiding unnecessary E2E runs:


---

Thanks, Chris! Totally agree — Turbo’s hashing mechanism does a solid job with partial cache hits based on file content.

What we’re aiming to solve here is:
When a PR is approved, the E2E suite runs against a merged view with main. That’s expected and useful.
But if there were unrelated changes in main, it could invalidate the cache even though the PR itself hasn’t touched relevant files — leading to unnecessary E2E runs.

So to keep things efficient:

We store a Turbo cache keyed with main on every push to main

PR approval runs use that as the restore key


This keeps the cache aligned with the version of main the PR runs against — avoiding accidental reruns where there’s no meaningful change.

Let me know what you think!


---

Want a shorter version for a quick comment too?

Got it! Here's the revised sentence to add to your reply to Chris:

> The E2E suite runs against a merged view with main, which is expected — and just to note, the checkout step checks out the temporary merge commit created by GitHub (not the PR branch’s latest commit), so any new changes on main get included in the build and cache behavior.



Let me know if you want to simplify it even further.



Solid follow-up, boss.

Short answer:

> No — in the store-main-cache job, stick with:



key: ${{ runner.os }}-turbo-main-cache-${{ github.sha }}

Why?

Because in the PR merge (i.e., pull_request: closed + merged == true):

github.sha is the actual commit pushed to main

You want to store the cache against that specific SHA, so future PRs can restore it using base.sha if they branch off from it



---

Recap:

✅ In store-main-cache (on PR merge):

key: ${{ runner.os }}-turbo-main-cache-${{ github.sha }}

This creates a fresh and unique cache entry for the new main SHA.

✅ In E2E test job (on PRs):

restore-keys:
  - ${{ runner.os }}-turbo-main-cache-${{ github.event.pull_request.base.sha }}
  - ${{ runner.os }}-turbo-main-cache-

This allows PRs to pull the latest relevant main cache they were branched from.


---

Final Tip:

This strategy creates a "breadcrumb trail": each new cache is stored under the latest main SHA, and PRs restore based on the base SHA they branched off from.

You're golden with this setup. Want me to generate a clean snippet combining both sections?



Yes boss, you’re spot on. You’ll need to combine the new workflow_dispatch condition with your existing if conditions in both jobs to prevent unintentional cache usage during manual runs.


---

✅ 1. In store-main-cache job:

You already have:

if: github.event.pull_request.merged == true

Now combine it with the workflow_dispatch check:

if: github.event_name != 'workflow_dispatch' && github.event.pull_request.merged == true


---

✅ 2. In e2e-test job:

If it currently has no if:, you can safely add:

if: github.event_name != 'workflow_dispatch'

Or if you already have other conditions (like in your screenshot with pull_request_review), combine them like this:

if: (github.event_name != 'workflow_dispatch') && 
    (github.event_name != 'pull_request_review' || github.event.review.state == 'approved')


---

Cleaned-up Examples:

store-main-cache job:

if: github.event_name != 'workflow_dispatch' && github.event.pull_request.merged == true

e2e-test job (optional if combining multiple checks):

if: github.event_name != 'workflow_dispatch'


---

Want a commit message?

Here you go:

Commit:

fix: guard cache logic from workflow_dispatch and non-merged PRs

Extended:

- Combined existing 'pull_request.merged' check with 'event_name != workflow_dispatch' for store-main-cache job
- Added workflow_dispatch guard to e2e-test job as well to avoid accidental restore/store in manual runs

Would you like me to update your PR comment to Chris as well with this included?


Perfect boss — here’s how to wrap it all up cleanly:


---

✅ Update to actions/cache condition:

You're adding a condition like:

if: github.event_name != 'workflow_dispatch'

This prevents the cache logic from running during manual dispatches, which is smart to avoid polluting or restoring incorrect cache state.


---

Updated Commit Message:

refactor: skip cache logic on workflow_dispatch to prevent unintended restore/store actions

Extended (optional):

- Added condition to skip cache usage when workflow is manually triggered
- Prevents accidental cache store/restore during adhoc workflow_dispatch runs
- Complements prior changes that linked main cache to github.sha and PR base SHA


---

Update to PR description (add this bullet at the end of your earlier PR description):

- Added a safeguard to skip cache logic during 'workflow_dispatch' to prevent unintended interference with main cache logic


---

Comment to Chris (add this line at the end of your update):

> Also added a small condition to skip the cache logic when the workflow is triggered manually (via workflow_dispatch) — just to ensure it doesn’t store or pull stale cache during test runs or one-off dispatches.




---

Would you like the full revised PR description with all the bullets merged in one shot?


