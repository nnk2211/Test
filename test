Yes, that’s a clean and practical way to do it.

You can:

1. Update the existing test description to:

'stack should have one public hosted zone with tags and query logging configured correctly'


2. Add this just below the existing hasResourceProperties() call:

template.hasResourceProperties('AWS::Route53::HostedZone', {
  QueryLoggingConfig: {
    CloudWatchLogsLogGroupArn: {
      'Fn::GetAtt': [
        expect.stringMatching(/^emberRoute53QueryLogs/),
        'Arn',
      ],
    },
  },
});



This keeps things readable, grouped by resource type, and avoids bloating the test file with an extra test case just for this.

template.hasResourceProperties('AWS::Route53::HostedZone', {
  QueryLoggingConfig: {
    CloudWatchLogsLogGroupArn: expect.stringMatching(/^emberRoute53QueryLogsGroupus-east-1/),
  },
});

template.hasResourceProperties('AWS::Route53::HostedZone', {
  QueryLoggingConfig: {
    CloudWatchLogsLogGroupArn: {
      'Fn::GetAtt': [
        expect.stringMatching(/Route53QueryLogsLogGroup/),
        'Arn',
      ],
    },
  },
});


'Fn::GetAtt': [
  Match.stringLikeRegexp('emberRoute53QueryLogsLogGroupuseast1[A-Z\\d]{8}'),
  'Arn'
]

Yes, your plan is spot on — and that inline code snippet is perfect.

Here’s a quick recap of what you said (with slight polish):


---

Test Code (inline in test file)

const hostedZones = template.findResources('AWS::Route53::HostedZone');
const hostedZone = Object.values(hostedZones)[0];

expect(hostedZone.DependsOn).toContain('Route53LogGroupAccess');


---

Test Structure Suggestion

You can write a separate test like this:

test('query logging should be configured correctly with log group and resource policy dependency', () => {
  const hostedZones = template.findResources('AWS::Route53::HostedZone');
  const hostedZone = Object.values(hostedZones)[0];

  // Check query logging config
  expect(hostedZone.Properties?.QueryLoggingConfig?.CloudWatchLogsLogGroupArn).toMatchObject({
    'Fn::GetAtt': [
      expect.stringMatching(/emberRoute53QueryLogsLogGroup/),
      'Arn'
    ]
  });

  // Check DependsOn is set correctly
  expect(hostedZone.DependsOn).toContain('Route53LogGroupAccess');
});


---

Why this works:

Keeps the assertion logic close to where it’s tested (easy for reviewers).

Verifies both:

Route53 HostedZone has correct logging config.

DependsOn ensures the resource policy exists before the zone.


Complements the existing hasResourceProperties and validateStackResource checks without duplicating.


Let me know if you want a reusable version later or want to inline all for now!

Great question. Here's the clear breakdown:


---

1. Can we test the CfnResourcePolicy?

Yes, absolutely.

You can write a test like this:

validateStackResource(template, 'AWS::Logs::ResourcePolicy', /Route53QueryLoggingPolicy/, 1, 0);

template.hasResourceProperties('AWS::Logs::ResourcePolicy', {
  PolicyName: 'Route53QueryLoggingPolicy',
  PolicyDocument: {
    Statement: [
      {
        Sid: 'AllowRoute53QueryLogging',
        Effect: 'Allow',
        Principal: {
          Service: 'route53.amazonaws.com',
        },
        Action: [
          'logs:CreateLogStream',
          'logs:PutLogEvents',
        ],
        Resource: {
          'Fn::GetAtt': [
            Match.stringLikeRegexp('.*QueryLogsLogGroup.*'),
            'Arn',
          ],
        },
      },
    ],
  },
});


---

2. Can we test .node.addDependency() or DependsOn?

Not directly through hasResourceProperties, because:

CDK's high-level synth doesn’t expose DependsOn unless explicitly added via Cfn* constructs.

.node.addDependency() influences resource order in CloudFormation, but doesn’t surface as a template property.


Alternative: You can test the order indirectly by asserting both resources exist and trusting .node.addDependency() does its job (since it’s CDK’s intended way).


---

Recommendation:

Yes: Write a test for CfnResourcePolicy.

No need: Skip DependsOn testing unless you're using CfnHostedZone and CfnResourcePolicy with raw overrides.


Let me know if you want the full test block written out.


template.hasResourceProperties('AWS::Logs::ResourcePolicy', {
  PolicyName: 'Route53QueryLoggingPolicy',
  PolicyDocument: {
    'Fn::Join': Match.arrayWith([
      Match.stringLikeRegexp('logs:CreateLogStream'),
      Match.stringLikeRegexp('logs:PutLogEvents'),
      Match.stringLikeRegexp('route53.amazonaws.com'),
    ])
  }
});

template.hasResourceProperties('AWS::Logs::ResourcePolicy', {
  PolicyName: 'Route53QueryLoggingPolicy'
});

Yes — this test case is clear, well-structured, and covers the key expectations for the Route 53 query logging flow. Here's a quick validation + minor optional refinements:


---

What you're covering (well done):

Hosted zone creation: validateStackResource(...) confirms the hosted zone exists.

Log group attached: Validates QueryLoggingConfig.CloudWatchLogsLogGroupArn with a regex.

Resource policy added: Verifies the Route53QueryLoggingPolicy was created.

Dependency order: Ensures DependsOn is set for the hosted zone (good catch).



---

✅ Looks optimized already.

Minor suggestions (optional):

1. Group logically (add spacing):

// Validate hosted zone resource
validateStackResource(...)

// Check query logging ARN
template.hasResourceProperties(...)

// Check log group resource policy exists
template.hasResourceProperties(...)

// Ensure hosted zone waits for resource policy
const hostedZones = ...
const hostedZone = ...
expect(...).toContain(...)


2. Test name tweak (more readable):

test('public hosted zone should have query logging, resource policy, and correct dependency order', ...)




---

Overall:

Your test is clean, minimal, and covers the whole flow. You don’t need to break it down unless test clarity or rerun granularity becomes a concern.

You can proudly demo this! Let me know if you need a comment block or test title description for docs or PR.

Here’s a simple and clear reply you can use:


---

Actually, since CfnResourcePolicy is an L1 construct, the policyDocument needs to be a string as per the documentation – AWS Docs.
I tried using a raw object without JSON.stringify, but it threw an error saying it must be a string. So had to keep it as JSON.stringify(...) to make it work.


---

Let me know if you want a shorter or more formal version!

